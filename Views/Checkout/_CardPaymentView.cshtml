@model CakeCapitalCheckout.ViewModels.CheckoutViewModel;

<div>
    <div id="loading" class="m-5">
        <div class="spinner-border text-dark" role="status">
            <span class="visually-hidden"> Loading...</span>
        </div>
    </div>

    <div id="element" style="display: none;">
        <div id="success" class="alert alert-success" style="display: none;">Payment was Successful!</div>

        <p id="error" style="color: red; font-size: 12px;"></p>

        <div class="field-container">
            <label>Card number</label>
            <div class="cake-input" id="cardNumber"></div>
        </div>
        <div class="field-container">
            <label>Expiry</label>
            <div class="cake-input" id="expiry"></div>
        </div>
        <div class="field-container">
            <label>Cvc</label>
            <div class="cake-input" id="cvc"></div>
        </div>
        <button class="button mt-5" id="submit" onclick="submitPayment(this)" disabled>Pay now</button>
    </div>
</div>


<script>
    try {
        Airwallex.init({
            env: '@Model.PaymentIntent.PaymentEnvironment',
            origin: window.location.origin,
        });

        var cardNumber = Airwallex.createElement("cardNumber");
        var expiry = Airwallex.createElement("expiry");
        var cvc = Airwallex.createElement("cvc");

        cardNumber.mount("cardNumber");
        expiry.mount("expiry");
        cvc.mount("cvc");
    } catch (error) {
        document.getElementById("loading").style.display = "none";
        document.getElementById("error").style.display = "block";
        document.getElementById("error").innerHTML = error.message;
        console.error("There was an error", error);
    }


    function submitPayment(element) {
        element.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Submitting...';
        element.disabled = true;

        Airwallex.confirmPaymentIntent({
            element: Airwallex.getElement("cardNumber"),
            id: '@Model.PaymentIntent.Id',
            client_secret: '@Model.PaymentIntent.ClientSecret'
        })
        .then((response) => {
            element.innerHTML = 'Pay now';
            element.disabled = false;

            document.getElementById("success").style.display = "block";
            window.location.href = '@Model.PaymentSession.SuccessUrl';
        })
        .catch((response) => {
            element.innerHTML = 'Pay now';
            element.disabled = false;

            document.getElementById("error").style.display = "block";
            document.getElementById("error").innerHTML = response.message;
            console.error("There was an error", response);
        });
    }

    var elementsReady = {
        cardNumber: false,
        expiry: false,
        cvc: false
    };
    var cardNumberElement = document.getElementById("cardNumber");
    var expiryElement = document.getElementById("expiry");
    var cvcElement = document.getElementById("cvc");
    var domElementArray = [cardNumberElement, expiryElement, cvcElement];

    domElementArray.forEach((element) => {
        element.addEventListener("onReady", (event) => {
            var { type } = event.detail;
            if (elementsReady.hasOwnProperty(type)) {
                elementsReady[type] = true;
            }

            if (!Object.values(elementsReady).includes(false)) {
                document.getElementById("loading").style.display = "none";
                document.getElementById("element").style.display = "block";
            }
        });
    });

    var elementsCompleted = {
        cardNumber: false,
        expiry: false,
        cvc: false
    };

    domElementArray.forEach((element) => {
        element.addEventListener("onChange", (event) => {
            var { type, complete } = event.detail;
            if (elementsCompleted.hasOwnProperty(type)) {
                elementsCompleted[type] = complete;
            }
                        
            var allElementsCompleted = !Object.values(
                elementsCompleted
            ).includes(false);

            document.getElementById("submit").disabled = !allElementsCompleted;
        });
    });

    domElementArray.forEach((element) => {
        element.addEventListener("onFocus", (event) => {
            var element = document.getElementById("error");
            if (element) {
                element.innerHTML = "";
            }
        });
    });

    domElementArray.forEach((element) => {
        element.addEventListener("onBlur", (event) => {
            var { error } = event.detail;
            var element = document.getElementById("error");
            if (element && error) {
                element.innerHTML = error.message || JSON.stringify(error);
            }
        });
    });

    domElementArray.forEach((element) => {
        element.addEventListener("onBlur", (event) => {
            var { error } = event.detail;
            
            if(error)
            {
                document.getElementById("error").style.display = "block";
                document.getElementById("error").innerHTML = error.message;
                console.error("There was an error", event.detail);
            }
        });
    });
</script>
